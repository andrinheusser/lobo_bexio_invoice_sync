import { z } from "zod";

export const bexioCreateContactSchema = z.object({
  contact_type_id: z.number().describe("1 for companies, 2 for people"),
  name_1: z.string(),
  name_2: z.string().nullable().optional(),
  address: z.string().nullable().optional(),
  postcode: z.string().nullable().optional(),
  city: z.string().nullable().optional(),
  mail: z.string().nullable().optional(),
  phone_fixed: z.string().nullable().optional(),
  fax: z.string().nullable().optional(),
  user_id: z.number(),
  owner_id: z.number(),
});

export const bexioContactSchema = z.object({
  id: z.number(),
  nr: z.string().nullable(),
  contact_type_id: z.number().nullable(),
  name_1: z.string(),
  name_2: z.string().nullable(),
  salutation_id: z.number().nullable(),
  salutation_form: z.number().nullable(),
  title_id: z.number().nullable(),
  birthday: z.string().nullable(),
  address: z.string().nullable(),
  postcode: z.string().nullable(),
  city: z.string().nullable(),
  country_id: z.number().nullable(),
  mail: z.string().nullable(),
  mail_second: z.string().nullable(),
  phone_fixed: z.string().nullable(),
  phone_fixed_second: z.string().nullable(),
  phone_mobile: z.string().nullable(),
  fax: z.string().nullable(),
  url: z.string().nullable(),
  skype_name: z.string().nullable(),
  remarks: z.string().nullable(),
  language_id: z.string().nullable(),
  is_lead: z.boolean().nullable(),
  contact_group_ids: z.string().nullable(),
  contact_branch_ids: z.string().nullable(),
  user_id: z.number().nullable(),
  owner_id: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const bexioCreateInvoiceSchema = z.object({
  title: z.string().nullable().optional(),
  contact_id: z.number(),
  user_id: z.number(),
  pr_project_id: z.number().nullable(),
  language_id: z.number(),
  bank_account_id: z.number(),
  currency_id: z.number(),
  payment_type_id: z.number(),
  header: z.string(),
  footer: z.string(),
  mwst_type: z.number(),
  mwst_is_net: z.boolean(),
  show_position_taxes: z.boolean(),
  reference: z.string().nullable(),
  api_reference: z.string().nullable(),
  is_valid_from: z.string().describe("YYYY-MM-DD"),
  is_valid_to: z.string().describe("YYYY-MM-DD"),
  positions: z.array(
    z.object({
      amount: z.string().describe("5.0000"),
      unit_id: z.number(),
      text: z.string(),
      account_id: z.number(),
      tax_id: z.number(),
      unit_price: z.string().describe("3.56000"),
      discount_in_percent: z.string().describe("0.0000"),
      type: z.literal("KbPositionCustom"),
    })
  ),
});

/*
{
  "id": 4,
  "document_nr": "RE-00001",
  "title": null,
  "contact_id": 14,
  "contact_sub_id": null,
  "user_id": 1,
  "project_id": null,
  "logopaper_id": 1,
  "language_id": 1,
  "bank_account_id": 1,
  "currency_id": 1,
  "payment_type_id": 1,
  "header": "Thank you very much for your inquiry. We would be pleased to make you the following offer:",
  "footer": "We hope that our offer meets your expectations and will be happy to answer your questions.",
  "total_gross": "17.800000",
  "total_net": "17.800000",
  "total_taxes": "1.3706",
  "total_received_payments": "0.000000",
  "total_credit_vouchers": "0.000000",
  "total_remaining_payments": "19.150000",
  "total": "19.150000",
  "total_rounding_difference": -0.02,
  "mwst_type": 0,
  "mwst_is_net": true,
  "show_position_taxes": false,
  "is_valid_from": "2019-06-24",
  "is_valid_to": "2019-07-24",
  "contact_address": "UTA Immobilien AG\nStadtturmstrasse 15\n5400 Baden",
  "kb_item_status_id": 3,
  "reference": null,
  "api_reference": null,
  "viewed_by_client_at": null,
  "updated_at": "2019-04-08 13:17:32",
  "esr_id": 1,
  "qr_invoice_id": 1,
  "template_slug": "581a8010821e01426b8b456b",
  "taxs": [
    {
      "percentage": "7.70",
      "value": "1.3706"
    }
  ],
  "network_link": "",
  "positions": [
    {
      "id": 1,
      "amount": "5.000000",
      "unit_id": 1,
      "account_id": 1,
      "unit_name": "kg",
      "tax_id": 4,
      "tax_value": "7.70",
      "text": "Apples",
      "unit_price": "3.560000",
      "discount_in_percent": "0.000000",
      "position_total": "17.800000",
      "pos": 1,
      "internal_pos": 1,
      "is_optional": false,
      "type": "KbPositionCustom",
      "parent_id": null
    }
  ]
}
*/
export const bexioInvoiceSchema = z.object({
  id: z.number(),
  document_nr: z.string(),
  title: z.string().nullable().optional(),
  contact_id: z.number(),
  contact_sub_id: z.number().nullable().optional(),
  user_id: z.number(),
  project_id: z.number().nullable().optional(),
  logopaper_id: z.number().nullable().optional(),
  language_id: z.number(),
  bank_account_id: z.number(),
  currency_id: z.number(),
  payment_type_id: z.number(),
  header: z.string().nullable().optional(),
  footer: z.string().nullable().optional(),
  total_gross: z.string(),
  total_net: z.string(),
  total_taxes: z.string(),
  total_received_payments: z.string(),
  total_credit_vouchers: z.string(),
  total_remaining_payments: z.string(),
  total: z.string(),
  total_rounding_difference: z.number(),
  mwst_type: z.number(),
  mwst_is_net: z.boolean(),
  show_position_taxes: z.boolean(),
  is_valid_from: z.string().describe("YYYY-MM-DD"),
  is_valid_to: z.string().describe("YYYY-MM-DD"),
  contact_address: z.string(),
  kb_item_status_id: z.number(),
  reference: z.string().nullable(),
  api_reference: z.string().nullable(),
  viewed_by_client_at: z.string().nullable().optional(),
  updated_at: z.string().describe("YYYY-MM-DD HH:MM:SS"),
  esr_id: z.number(),
  qr_invoice_id: z.number(),
  template_slug: z.string(),
  taxs: z.array(
    z.object({
      percentage: z.string(),
      value: z.string(),
    })
  ),
  network_link: z.string(),
  /*positions: z.array(
        z.object({
            id: z.number(),
            amount: z.string(),
            unit_id: z.number(),
            account_id: z.number(),
            unit_name: z.string(),
            tax_id: z.number(),
            tax_value: z.string(),
            text: z.string(),
            unit_price: z.string(),
            discount_in_percent: z.string(),
            position_total: z.string(),
            is_optional: z.boolean(),
            type: z.string(),
            parent_id: z.number().nullable().optional(),
        })
    ),
    */
});
